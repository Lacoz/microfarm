{"version":3,"file":"index-DQILYKZe.js","sources":["../../../shared/dist/types.js","../../../shared/dist/utils.js","../../src/renderers/CharacterRenderer.ts","../../src/renderers/GameRenderer.ts","../../src/game/GameManager.ts","../../src/ui/CharacterCreationManager.ts","../../src/ui/UIManager.ts","../../src/services/ApiService.ts","../../src/main.ts"],"sourcesContent":["// Constants\nexport const GAME_CONSTANTS = {\n    TILE_WIDTH: 32,\n    TILE_HEIGHT: 16,\n    INITIAL_MONEY: 100,\n    INITIAL_ENERGY: 100,\n    INITIAL_SEEDS: 5,\n    ENERGY_COSTS: {\n        hoe: 5,\n        water: 3,\n        plant: 2,\n        harvest: 3\n    },\n    GROWTH_STAGES: 3,\n    GROWTH_TIME: 300 // 5 seconds at 60fps\n};\n//# sourceMappingURL=types.js.map","import { GAME_CONSTANTS } from './types';\n/**\n * Initialize a new farm with grass tiles\n */\nexport function initializeFarm(width, height) {\n    const tiles = [];\n    for (let y = 0; y < height; y++) {\n        tiles[y] = [];\n        for (let x = 0; x < width; x++) {\n            tiles[y][x] = {\n                type: 'grass',\n                watered: false,\n                planted: false,\n                growthStage: 0,\n                growthTime: 0,\n                maxGrowthTime: 0\n            };\n        }\n    }\n    return tiles;\n}\n/**\n * Convert screen coordinates to tile coordinates in isometric view\n */\nexport function screenToTile(screenX, screenY, centerX, centerY, cameraX, cameraY, farmWidth, farmHeight) {\n    const adjustedX = screenX - centerX - cameraX;\n    const adjustedY = screenY - centerY - cameraY;\n    const tileX = Math.round((adjustedX / (GAME_CONSTANTS.TILE_WIDTH / 2) + adjustedY / (GAME_CONSTANTS.TILE_HEIGHT / 2)) / 2);\n    const tileY = Math.round((adjustedY / (GAME_CONSTANTS.TILE_HEIGHT / 2) - adjustedX / (GAME_CONSTANTS.TILE_WIDTH / 2)) / 2);\n    if (tileX >= 0 && tileX < farmWidth && tileY >= 0 && tileY < farmHeight) {\n        return { x: tileX, y: tileY };\n    }\n    return null;\n}\n/**\n * Convert tile coordinates to screen coordinates in isometric view\n */\nexport function tileToScreen(tileX, tileY, centerX, centerY, cameraX, cameraY) {\n    const isoX = centerX + (tileX - tileY) * GAME_CONSTANTS.TILE_WIDTH / 2 + cameraX;\n    const isoY = centerY + (tileX + tileY) * GAME_CONSTANTS.TILE_HEIGHT / 2 + cameraY;\n    return { x: isoX, y: isoY };\n}\n/**\n * Get energy cost for using a tool\n */\nexport function getEnergyCost(tool) {\n    return GAME_CONSTANTS.ENERGY_COSTS[tool];\n}\n/**\n * Calculate harvest value based on growth stage\n */\nexport function calculateHarvestValue(growthStage) {\n    return 10 + growthStage * 5;\n}\n/**\n * Check if a tile can be used with a specific tool\n */\nexport function canUseTool(tile, tool) {\n    switch (tool) {\n        case 'hoe':\n            return tile.type === 'grass';\n        case 'water':\n            return tile.type === 'tilled' && !tile.watered;\n        case 'plant':\n            return tile.type === 'tilled' && tile.watered && !tile.planted;\n        case 'harvest':\n            return tile.planted && tile.growthStage >= GAME_CONSTANTS.GROWTH_STAGES;\n        default:\n            return false;\n    }\n}\n/**\n * Generate a unique ID\n */\nexport function generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\n/**\n * Validate player data\n */\nexport function validatePlayerData(data) {\n    const errors = [];\n    if (!data.name || typeof data.name !== 'string' || data.name.trim().length === 0) {\n        errors.push('Name is required and must be a non-empty string');\n    }\n    if (!data.bodyType || !['slim', 'average', 'sturdy'].includes(data.bodyType)) {\n        errors.push('Valid body type is required');\n    }\n    if (!data.hairStyle || !['short', 'long', 'curly', 'bald'].includes(data.hairStyle)) {\n        errors.push('Valid hair style is required');\n    }\n    if (!data.hairColor || typeof data.hairColor !== 'string') {\n        errors.push('Valid hair color is required');\n    }\n    if (!data.skinTone || typeof data.skinTone !== 'string') {\n        errors.push('Valid skin tone is required');\n    }\n    return {\n        valid: errors.length === 0,\n        errors\n    };\n}\n//# sourceMappingURL=utils.js.map","import { Player } from '@microfarm/shared';\n\nexport class CharacterRenderer {\n  drawCharacter(ctx: CanvasRenderingContext2D, x: number, y: number, player: Player): void {\n    const { bodyType, hairStyle, hairColor, skinTone } = player;\n    \n    // Body\n    ctx.fillStyle = skinTone;\n    let bodyWidth = 20;\n    let bodyHeight = 30;\n    \n    if (bodyType === 'slim') {\n      bodyWidth = 16;\n      bodyHeight = 28;\n    } else if (bodyType === 'sturdy') {\n      bodyWidth = 24;\n      bodyHeight = 32;\n    }\n    \n    ctx.fillRect(x - bodyWidth/2, y - bodyHeight, bodyWidth, bodyHeight);\n    \n    // Head\n    ctx.fillStyle = skinTone;\n    ctx.beginPath();\n    ctx.arc(x, y - bodyHeight - 15, 15, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Hair\n    ctx.fillStyle = hairColor;\n    if (hairStyle === 'short') {\n      ctx.fillRect(x - 12, y - bodyHeight - 25, 24, 8);\n    } else if (hairStyle === 'long') {\n      ctx.fillRect(x - 12, y - bodyHeight - 25, 24, 15);\n    } else if (hairStyle === 'curly') {\n      for (let i = 0; i < 5; i++) {\n        ctx.beginPath();\n        ctx.arc(x - 8 + i * 4, y - bodyHeight - 20 + (i % 2) * 3, 3, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    // Bald style - no hair drawn\n    \n    // Eyes\n    ctx.fillStyle = '#000';\n    ctx.beginPath();\n    ctx.arc(x - 5, y - bodyHeight - 18, 2, 0, Math.PI * 2);\n    ctx.arc(x + 5, y - bodyHeight - 18, 2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Mouth\n    ctx.strokeStyle = '#000';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.arc(x, y - bodyHeight - 8, 3, 0, Math.PI);\n    ctx.stroke();\n    \n    // Arms\n    ctx.fillStyle = skinTone;\n    ctx.fillRect(x - bodyWidth/2 - 8, y - bodyHeight + 5, 6, 20);\n    ctx.fillRect(x + bodyWidth/2 + 2, y - bodyHeight + 5, 6, 20);\n    \n    // Legs\n    ctx.fillRect(x - bodyWidth/2, y - 5, 6, 25);\n    ctx.fillRect(x + bodyWidth/2 - 6, y - 5, 6, 25);\n  }\n}\n","import { GameState, FarmTile, GAME_CONSTANTS } from '@microfarm/shared';\nimport { CharacterRenderer } from './CharacterRenderer';\nimport { screenToTile, tileToScreen } from '@microfarm/shared';\n\nexport class GameRenderer {\n  private characterRenderer: CharacterRenderer;\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private centerX: number;\n  private centerY: number;\n\n  constructor() {\n    this.characterRenderer = new CharacterRenderer();\n    this.canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n    this.ctx = this.canvas.getContext('2d')!;\n    this.centerX = this.canvas.width / 2;\n    this.centerY = this.canvas.height / 2;\n  }\n\n  render(gameState: GameState): void {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw farm tiles\n    this.drawFarm(gameState.farm);\n    \n    // Draw player\n    this.drawPlayer(gameState.player, gameState.camera);\n  }\n\n  private drawFarm(farm: GameState['farm']): void {\n    for (let y = 0; y < farm.height; y++) {\n      for (let x = 0; x < farm.width; x++) {\n        const tile = farm.tiles[y][x];\n        const screenPos = tileToScreen(x, y, this.centerX, this.centerY, 0, 0);\n        \n        // Skip tiles outside view\n        if (screenPos.x < -50 || screenPos.x > this.canvas.width + 50 || \n            screenPos.y < -50 || screenPos.y > this.canvas.height + 50) {\n          continue;\n        }\n        \n        this.drawTile(screenPos.x, screenPos.y, tile);\n      }\n    }\n  }\n\n  private drawTile(x: number, y: number, tile: FarmTile): void {\n    const colors = {\n      grass: '#90EE90',\n      tilled: '#8B4513',\n      watered: '#4169E1',\n      planted: '#228B22'\n    };\n    \n    // Tile color based on type\n    let color = colors[tile.type];\n    if (tile.watered && tile.type === 'tilled') {\n      color = colors.watered;\n    }\n    if (tile.planted) {\n      color = colors.planted;\n    }\n    \n    // Draw isometric tile\n    this.ctx.fillStyle = color;\n    this.ctx.strokeStyle = '#2F4F2F';\n    this.ctx.lineWidth = 1;\n    \n    this.ctx.beginPath();\n    this.ctx.moveTo(x, y - GAME_CONSTANTS.TILE_HEIGHT);\n    this.ctx.lineTo(x + GAME_CONSTANTS.TILE_WIDTH/2, y);\n    this.ctx.lineTo(x, y + GAME_CONSTANTS.TILE_HEIGHT);\n    this.ctx.lineTo(x - GAME_CONSTANTS.TILE_WIDTH/2, y);\n    this.ctx.closePath();\n    this.ctx.fill();\n    this.ctx.stroke();\n    \n    // Draw crop if planted\n    if (tile.planted && tile.growthStage > 0) {\n      this.drawCrop(x, y, tile.growthStage);\n    }\n  }\n\n  private drawCrop(x: number, y: number, growthStage: number): void {\n    const colors = ['#228B22', '#32CD32', '#FFD700'];\n    const color = colors[Math.min(growthStage - 1, colors.length - 1)];\n    \n    this.ctx.fillStyle = color;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y - GAME_CONSTANTS.TILE_HEIGHT/2, 3 + growthStage * 2, 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n  private drawPlayer(player: GameState['player'], camera: GameState['camera']): void {\n    const playerX = this.centerX + camera.x;\n    const playerY = this.centerY + camera.y;\n    \n    this.characterRenderer.drawCharacter(this.ctx, playerX, playerY, player);\n  }\n\n  getTileAtScreenPosition(screenX: number, screenY: number, gameState: GameState): { x: number; y: number } | null {\n    return screenToTile(\n      screenX, \n      screenY, \n      this.centerX, \n      this.centerY, \n      gameState.camera.x, \n      gameState.camera.y,\n      gameState.farm.width,\n      gameState.farm.height\n    );\n  }\n}\n","import { GameState, CreatePlayerRequest, ToolType, UpdateGameStateRequest } from '@microfarm/shared';\nimport { ApiService } from '../services/ApiService';\nimport { UIManager } from '../ui/UIManager';\nimport { GameRenderer } from '../renderers/GameRenderer';\n\nexport class GameManager {\n  private apiService: ApiService;\n  private uiManager: UIManager;\n  private gameRenderer: GameRenderer;\n  private gameState: GameState | null = null;\n  private playerId: string | null = null;\n  private animationFrameId: number | null = null;\n  private cropUpdateInterval: number | null = null;\n\n  constructor(apiService: ApiService, uiManager: UIManager) {\n    this.apiService = apiService;\n    this.uiManager = uiManager;\n    this.gameRenderer = new GameRenderer();\n  }\n\n  async startGame(playerData: CreatePlayerRequest): Promise<void> {\n    try {\n      // Create player and get initial game state\n      const result = await this.apiService.createPlayer(playerData);\n      this.gameState = result.gameState;\n      this.playerId = result.player.id;\n\n      // Switch to game screen\n      this.uiManager.switchToGameScreen();\n\n      // Setup game controls\n      this.setupGameControls();\n\n      // Start game loop\n      this.startGameLoop();\n\n      // Start crop update interval\n      this.startCropUpdateInterval();\n\n      // Update UI\n      this.uiManager.updateGameUI(this.gameState);\n\n    } catch (error) {\n      console.error('Failed to start game:', error);\n      this.uiManager.showMessage('Failed to start game', 'error');\n      throw error;\n    }\n  }\n\n  private setupGameControls(): void {\n    if (!this.gameState) return;\n\n    // Setup tool buttons\n    this.uiManager.setupToolButtons((tool: string) => {\n      this.gameState!.game.currentTool = tool as ToolType;\n    });\n\n    // Setup keyboard controls\n    this.uiManager.setupKeyboardControls(\n      (tool: string) => {\n        this.gameState!.game.currentTool = tool as ToolType;\n      },\n      (direction: string) => {\n        this.moveCamera(direction);\n      }\n    );\n\n    // Setup canvas click events\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n    canvas.addEventListener('click', (e) => {\n      this.handleCanvasClick(e);\n    });\n\n    canvas.addEventListener('mousemove', (e) => {\n      this.handleCanvasMouseMove(e);\n    });\n  }\n\n  private handleCanvasClick(e: MouseEvent): void {\n    if (!this.gameState || !this.playerId) return;\n\n    const rect = (e.target as HTMLCanvasElement).getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    const tileCoords = this.gameRenderer.getTileAtScreenPosition(x, y, this.gameState);\n    if (tileCoords) {\n      this.useTool(tileCoords.x, tileCoords.y);\n    }\n  }\n\n  private handleCanvasMouseMove(e: MouseEvent): void {\n    if (!this.gameState) return;\n\n    const rect = (e.target as HTMLCanvasElement).getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    const tileCoords = this.gameRenderer.getTileAtScreenPosition(x, y, this.gameState);\n    const canvas = e.target as HTMLCanvasElement;\n    \n    if (tileCoords) {\n      canvas.style.cursor = 'pointer';\n    } else {\n      canvas.style.cursor = 'crosshair';\n    }\n  }\n\n  private async useTool(tileX: number, tileY: number): Promise<void> {\n    if (!this.gameState || !this.playerId) return;\n\n    try {\n      const result = await this.apiService.useTool(\n        this.playerId,\n        this.gameState.game.currentTool,\n        tileX,\n        tileY\n      );\n\n      if (result.success) {\n        this.gameState = result.gameState;\n        this.uiManager.updateGameUI(this.gameState);\n\n        if (result.harvestValue > 0) {\n          this.uiManager.showMessage(`Harvested! +$${result.harvestValue}`, 'success');\n        }\n      } else {\n        this.uiManager.showMessage('Cannot use tool here', 'error');\n      }\n    } catch (error) {\n      console.error('Failed to use tool:', error);\n      this.uiManager.showMessage('Failed to use tool', 'error');\n    }\n  }\n\n  private async moveCamera(direction: string): Promise<void> {\n    if (!this.gameState || !this.playerId) return;\n\n    const cameraSpeed = 10;\n    let newCamera = { ...this.gameState.camera };\n\n    switch (direction) {\n      case 'up':\n        newCamera.y += cameraSpeed;\n        break;\n      case 'down':\n        newCamera.y -= cameraSpeed;\n        break;\n      case 'left':\n        newCamera.x += cameraSpeed;\n        break;\n      case 'right':\n        newCamera.x -= cameraSpeed;\n        break;\n    }\n\n    try {\n      const updateData: UpdateGameStateRequest = {\n        playerId: this.playerId,\n        gameState: { camera: newCamera }\n      };\n\n      const result = await this.apiService.updateGameState(this.playerId, updateData);\n      this.gameState = result.gameState;\n    } catch (error) {\n      console.error('Failed to move camera:', error);\n    }\n  }\n\n  private startGameLoop(): void {\n    const gameLoop = () => {\n      if (this.gameState) {\n        this.gameRenderer.render(this.gameState);\n      }\n      this.animationFrameId = requestAnimationFrame(gameLoop);\n    };\n    gameLoop();\n  }\n\n  private startCropUpdateInterval(): void {\n    this.cropUpdateInterval = window.setInterval(async () => {\n      if (this.playerId) {\n        try {\n          const result = await this.apiService.updateCrops(this.playerId);\n          this.gameState = result.gameState;\n        } catch (error) {\n          console.error('Failed to update crops:', error);\n        }\n      }\n    }, 1000); // Update every second\n  }\n\n  stop(): void {\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = null;\n    }\n\n    if (this.cropUpdateInterval) {\n      clearInterval(this.cropUpdateInterval);\n      this.cropUpdateInterval = null;\n    }\n  }\n}\n","import { Player, BodyType, HairStyle, CreatePlayerRequest } from '@microfarm/shared';\nimport { GameManager } from '../game/GameManager';\nimport { CharacterRenderer } from '../renderers/CharacterRenderer';\n\nexport class CharacterCreationManager {\n  private characterRenderer: CharacterRenderer;\n  private currentPlayer: Partial<Player> = {\n    name: 'Farmer',\n    bodyType: 'average',\n    hairStyle: 'short',\n    hairColor: '#8B4513',\n    skinTone: '#FDBB7D'\n  };\n\n  constructor() {\n    this.characterRenderer = new CharacterRenderer();\n  }\n\n  init(gameManager: GameManager): void {\n    this.setupEventListeners(gameManager);\n    this.updateCharacterPreview();\n  }\n\n  private setupEventListeners(gameManager: GameManager): void {\n    // Name input\n    const nameInput = document.getElementById('farmer-name') as HTMLInputElement;\n    nameInput.addEventListener('input', (e) => {\n      this.currentPlayer.name = (e.target as HTMLInputElement).value || 'Farmer';\n      this.updateCharacterPreview();\n    });\n\n    // Body type buttons\n    document.querySelectorAll('[data-body]').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        document.querySelectorAll('[data-body]').forEach(b => b.classList.remove('active'));\n        e.target.classList.add('active');\n        this.currentPlayer.bodyType = (e.target as HTMLElement).dataset.body as BodyType;\n        this.updateCharacterPreview();\n      });\n    });\n\n    // Hair style buttons\n    document.querySelectorAll('[data-hair]').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        document.querySelectorAll('[data-hair]').forEach(b => b.classList.remove('active'));\n        e.target.classList.add('active');\n        this.currentPlayer.hairStyle = (e.target as HTMLElement).dataset.hair as HairStyle;\n        this.updateCharacterPreview();\n      });\n    });\n\n    // Hair color buttons\n    document.querySelectorAll('[data-color]').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        document.querySelectorAll('[data-color]').forEach(b => b.classList.remove('active'));\n        e.target.classList.add('active');\n        this.currentPlayer.hairColor = (e.target as HTMLElement).dataset.color!;\n        this.updateCharacterPreview();\n      });\n    });\n\n    // Skin tone buttons\n    document.querySelectorAll('[data-skin]').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        document.querySelectorAll('[data-skin]').forEach(b => b.classList.remove('active'));\n        e.target.classList.add('active');\n        this.currentPlayer.skinTone = (e.target as HTMLElement).dataset.skin!;\n        this.updateCharacterPreview();\n      });\n    });\n\n    // Start game button\n    const startButton = document.getElementById('start-game-btn');\n    startButton.addEventListener('click', async () => {\n      await this.startGame(gameManager);\n    });\n  }\n\n  private updateCharacterPreview(): void {\n    const canvas = document.getElementById('character-preview-canvas') as HTMLCanvasElement;\n    const ctx = canvas.getContext('2d')!;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Draw character\n    this.characterRenderer.drawCharacter(ctx, 100, 150, this.currentPlayer as Player);\n  }\n\n  private async startGame(gameManager: GameManager): Promise<void> {\n    if (!this.currentPlayer.name?.trim()) {\n      alert('Please enter a name for your farmer!');\n      return;\n    }\n\n    try {\n      const playerData: CreatePlayerRequest = {\n        name: this.currentPlayer.name,\n        bodyType: this.currentPlayer.bodyType!,\n        hairStyle: this.currentPlayer.hairStyle!,\n        hairColor: this.currentPlayer.hairColor!,\n        skinTone: this.currentPlayer.skinTone!\n      };\n\n      await gameManager.startGame(playerData);\n    } catch (error) {\n      console.error('Failed to start game:', error);\n      alert('Failed to start game. Please try again.');\n    }\n  }\n}\n","import { GameState } from '@microfarm/shared';\n\nexport class UIManager {\n  updateGameUI(gameState: GameState): void {\n    // Update player info\n    const playerNameElement = document.getElementById('player-name');\n    const dayCounterElement = document.getElementById('day-counter');\n    const moneyElement = document.getElementById('money');\n    const energyElement = document.getElementById('energy');\n    const seedCountElement = document.getElementById('seed-count');\n\n    if (playerNameElement) {\n      playerNameElement.textContent = gameState.player.name;\n    }\n    if (dayCounterElement) {\n      dayCounterElement.textContent = `Day ${gameState.game.day}`;\n    }\n    if (moneyElement) {\n      moneyElement.textContent = `$${gameState.game.money}`;\n    }\n    if (energyElement) {\n      energyElement.textContent = `Energy: ${gameState.game.energy}/${gameState.game.maxEnergy}`;\n    }\n    if (seedCountElement) {\n      seedCountElement.textContent = gameState.game.seeds.toString();\n    }\n  }\n\n  switchToGameScreen(): void {\n    const characterCreationScreen = document.getElementById('character-creation');\n    const gameScreen = document.getElementById('game-screen');\n\n    if (characterCreationScreen && gameScreen) {\n      characterCreationScreen.classList.remove('active');\n      gameScreen.classList.add('active');\n    }\n  }\n\n  setActiveTool(tool: string): void {\n    // Remove active class from all tool buttons\n    document.querySelectorAll('.tool-btn').forEach(btn => {\n      btn.classList.remove('active');\n    });\n\n    // Add active class to the selected tool\n    const toolButton = document.getElementById(`${tool}-btn`);\n    if (toolButton) {\n      toolButton.classList.add('active');\n    }\n  }\n\n  showMessage(message: string, type: 'info' | 'error' | 'success' = 'info'): void {\n    // Create a simple message display\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `game-message ${type}`;\n    messageDiv.textContent = message;\n    messageDiv.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      padding: 15px 20px;\n      border-radius: 8px;\n      color: white;\n      font-weight: 600;\n      z-index: 1000;\n      animation: slideIn 0.3s ease-out;\n    `;\n\n    // Set background color based on type\n    switch (type) {\n      case 'error':\n        messageDiv.style.backgroundColor = '#e74c3c';\n        break;\n      case 'success':\n        messageDiv.style.backgroundColor = '#27ae60';\n        break;\n      default:\n        messageDiv.style.backgroundColor = '#3498db';\n    }\n\n    document.body.appendChild(messageDiv);\n\n    // Remove message after 3 seconds\n    setTimeout(() => {\n      messageDiv.style.animation = 'slideOut 0.3s ease-in';\n      setTimeout(() => {\n        if (messageDiv.parentNode) {\n          messageDiv.parentNode.removeChild(messageDiv);\n        }\n      }, 300);\n    }, 3000);\n  }\n\n  setupToolButtons(onToolSelect: (tool: string) => void): void {\n    document.querySelectorAll('.tool-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const tool = (e.target as HTMLElement).id.replace('-btn', '');\n        this.setActiveTool(tool);\n        onToolSelect(tool);\n      });\n    });\n  }\n\n  setupKeyboardControls(\n    onToolSelect: (tool: string) => void,\n    onCameraMove: (direction: string) => void\n  ): void {\n    document.addEventListener('keydown', (e) => {\n      switch (e.key.toLowerCase()) {\n        case 'h':\n          this.setActiveTool('hoe');\n          onToolSelect('hoe');\n          break;\n        case 'w':\n          this.setActiveTool('water');\n          onToolSelect('water');\n          break;\n        case 'p':\n          this.setActiveTool('plant');\n          onToolSelect('plant');\n          break;\n        case 'g':\n          this.setActiveTool('harvest');\n          onToolSelect('harvest');\n          break;\n        case 'arrowup':\n          onCameraMove('up');\n          break;\n        case 'arrowdown':\n        case 's':\n          onCameraMove('down');\n          break;\n        case 'arrowleft':\n        case 'a':\n          onCameraMove('left');\n          break;\n        case 'arrowright':\n        case 'd':\n          onCameraMove('right');\n          break;\n      }\n    });\n  }\n}\n","import { \n  Player, \n  GameState, \n  CreatePlayerRequest, \n  UpdateGameStateRequest, \n  ApiResponse,\n  ToolType \n} from '@microfarm/shared';\n\nexport class ApiService {\n  private baseUrl = '/api';\n\n  async createPlayer(playerData: CreatePlayerRequest): Promise<{ player: Player; gameState: GameState }> {\n    const response = await fetch(`${this.baseUrl}/players`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(playerData),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to create player');\n    }\n\n    const result: ApiResponse<{ player: Player; gameState: GameState }> = await response.json();\n    return result.data!;\n  }\n\n  async getPlayer(playerId: string): Promise<{ player: Player; gameState: GameState }> {\n    const response = await fetch(`${this.baseUrl}/players/${playerId}`);\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to get player');\n    }\n\n    const result: ApiResponse<{ player: Player; gameState: GameState }> = await response.json();\n    return result.data!;\n  }\n\n  async useTool(playerId: string, tool: ToolType, tileX: number, tileY: number): Promise<{\n    success: boolean;\n    energyCost: number;\n    harvestValue: number;\n    gameState: GameState;\n  }> {\n    const response = await fetch(`${this.baseUrl}/players/${playerId}/use-tool`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ tool, tileX, tileY }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to use tool');\n    }\n\n    const result: ApiResponse<{\n      success: boolean;\n      energyCost: number;\n      harvestValue: number;\n      gameState: GameState;\n    }> = await response.json();\n    return result.data!;\n  }\n\n  async updateGameState(playerId: string, updateData: UpdateGameStateRequest): Promise<{ gameState: GameState }> {\n    const response = await fetch(`${this.baseUrl}/players/${playerId}/game-state`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update game state');\n    }\n\n    const result: ApiResponse<{ gameState: GameState }> = await response.json();\n    return result.data!;\n  }\n\n  async updateCrops(playerId: string): Promise<{ gameState: GameState }> {\n    const response = await fetch(`${this.baseUrl}/players/${playerId}/update-crops`, {\n      method: 'POST',\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to update crops');\n    }\n\n    const result: ApiResponse<{ gameState: GameState }> = await response.json();\n    return result.data!;\n  }\n}\n","import { GameManager } from './game/GameManager';\nimport { CharacterCreationManager } from './ui/CharacterCreationManager';\nimport { UIManager } from './ui/UIManager';\nimport { ApiService } from './services/ApiService';\n\n// Initialize the game when the page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n  const apiService = new ApiService();\n  const characterCreationManager = new CharacterCreationManager();\n  const uiManager = new UIManager();\n  const gameManager = new GameManager(apiService, uiManager);\n\n  // Start the application\n  characterCreationManager.init(gameManager);\n});\n"],"names":["GAME_CONSTANTS","screenToTile","screenX","screenY","centerX","centerY","cameraX","cameraY","farmWidth","farmHeight","adjustedX","adjustedY","tileX","tileY","tileToScreen","isoX","isoY","CharacterRenderer","ctx","x","y","player","bodyType","hairStyle","hairColor","skinTone","bodyWidth","bodyHeight","i","GameRenderer","gameState","farm","tile","screenPos","colors","color","growthStage","camera","playerX","playerY","GameManager","apiService","uiManager","playerData","result","error","tool","direction","canvas","e","rect","tileCoords","cameraSpeed","newCamera","updateData","gameLoop","CharacterCreationManager","gameManager","btn","b","_a","UIManager","playerNameElement","dayCounterElement","moneyElement","energyElement","seedCountElement","characterCreationScreen","gameScreen","toolButton","message","type","messageDiv","onToolSelect","onCameraMove","ApiService","response","playerId","characterCreationManager"],"mappings":"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"}